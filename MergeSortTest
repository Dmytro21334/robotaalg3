import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.Random;

public class MergeSortTest {

    @Test
    public void testMergeSortDescending() {
        Integer[] sourceArray = new Integer[] {-5, 4, 10, 2, 1, 8, -5, 0};
        Integer[] expectedArray = new Integer[] {10, 8, 4, 2, 1, 0, -5, -5};

        MergeSort<Integer> mergeSortAlg = new MergeSort<>(sourceArray);
        mergeSortAlg.mergeSortDescending();

        assertThat(mergeSortAlg.getArray()).isEqualTo(expectedArray);
    }

    @Test
    public void testMergeSortInRange() {
        Integer[] sourceArray = new Integer[] {-5, 4, 10, 2, 1, 8, -5, 0};
        Integer[] expectedArray = new Integer[] {-5, 4, 10, 2, 1, 8, -5, 0};

        MergeSort<Integer> mergeSortAlg = new MergeSort<>(sourceArray);
        mergeSortAlg.mergeSortInRange(2, 5, true);

        expectedArray[2] = 1;
        expectedArray[3] = 2;
        expectedArray[4] = 4;
        expectedArray[5] = 10;

        assertThat(mergeSortAlg.getArray()).isEqualTo(expectedArray);
    }

    @Test
    public void testSortingPerformance() {
        Random random = new Random();
        int size = 10000;
        Integer[] array = random.ints(size, 0, 100000).boxed().toArray(Integer[]::new);

        Integer[] arrayCopy1 = Arrays.copyOf(array, array.length);
        long startTime = System.currentTimeMillis();
        MergeSort<Integer> mergeSort = new MergeSort<>(arrayCopy1);
        mergeSort.mergeSortDescending();
        long endTime = System.currentTimeMillis();
        System.out.println("MergeSort Time: " + (endTime - startTime) + "ms");

        Integer[] arrayCopy2 = Arrays.copyOf(array, array.length);
        startTime = System.currentTimeMillis();
        Arrays.sort(arrayCopy2);
        endTime = System.currentTimeMillis();
        System.out.println("QuickSort Time: " + (endTime - startTime) + "ms");
    }
}

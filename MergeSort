import java.util.Arrays;

public record MergeSort<T extends Comparable<T>>(T[] array) {

    public MergeSort(T[] array) {
        this.array = Arrays.copyOf(array, array.length);
    }

    public void mergeSortInRange(int leftIndex, int rightIndex, boolean ascending) {
        if (leftIndex < 0 || rightIndex >= array.length || leftIndex >= rightIndex) {
            throw new IllegalArgumentException("Invalid range");
        }
        mergeSortRecursive(array, leftIndex, rightIndex, ascending);
    }

    private void mergeSortRecursive(T[] array, int leftIndex, int rightIndex, boolean descending) {
        if (rightIndex - leftIndex <= 0) return;

        int middle = (leftIndex + rightIndex) / 2;

        mergeSortRecursive(array, leftIndex, middle, descending);
        mergeSortRecursive(array, middle + 1, rightIndex, descending);

        merge(array, leftIndex, middle, rightIndex, descending);
    }

    private void merge(T[] array, int leftIndex, int middle, int rightIndex, boolean descending) {
        int leftPointer = leftIndex;
        int rightPointer = middle + 1;
        T[] tempArray = Arrays.copyOf(array, array.length);

        for (int i = leftIndex; i <= rightIndex; i++) {
            if (leftPointer <= middle && (rightPointer > rightIndex ||
                    (descending ? array[leftPointer].compareTo(array[rightPointer]) >= 0
                            : array[leftPointer].compareTo(array[rightPointer]) <= 0))) {
                tempArray[i] = array[leftPointer++];
            } else {
                tempArray[i] = array[rightPointer++];
            }
        }

        System.arraycopy(tempArray, leftIndex, array, leftIndex, rightIndex - leftIndex + 1);
    }

    public T[] getArray() {
        return array;
    }

    public void mergeSortDescending() {
    }
}

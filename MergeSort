import java.util.Arrays;

public class MergeSort<T extends Comparable<T>> {
    private final T[] array;

    public MergeSort(T[] array) {
        this.array = Arrays.copyOf(array, array.length);
    }

    public T[] getArray() {
        return array;
    }

    public void mergeSortDescending() {
        mergeSortRecursive(0, array.length - 1, true);
    }

    public void mergeSortInRange(int leftIndex, int rightIndex, boolean ascending) {
        if (leftIndex < 0 || rightIndex >= array.length || leftIndex >= rightIndex) {
            throw new IllegalArgumentException("Invalid index range");
        }
        mergeSortRecursive(leftIndex, rightIndex, !ascending); // !ascending = descending
    }

    private void mergeSortRecursive(int left, int right, boolean descending) {
        if (left >= right) return;

        int mid = (left + right) / 2;
        mergeSortRecursive(left, mid, descending);
        mergeSortRecursive(mid + 1, right, descending);
        merge(array, left, mid, right, descending);
    }

    private void merge(T[] array, int left, int mid, int right, boolean descending) {
        T[] leftPart = Arrays.copyOfRange(array, left, mid + 1);
        T[] rightPart = Arrays.copyOfRange(array, mid + 1, right + 1);

        int i = 0, j = 0, k = left;

        while (i < leftPart.length && j < rightPart.length) {
            if ((descending && leftPart[i].compareTo(rightPart[j]) >= 0) ||
                    (!descending && leftPart[i].compareTo(rightPart[j]) <= 0)) {
                array[k++] = leftPart[i++];
            } else {
                array[k++] = rightPart[j++];
            }
        }

        while (i < leftPart.length) array[k++] = leftPart[i++];
        while (j < rightPart.length) array[k++] = rightPart[j++];
    }
}
